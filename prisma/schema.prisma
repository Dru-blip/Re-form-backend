generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String @unique
  password String

  forms     Form[]
  responses Response[]

  @@map("users")
}

model Form {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  settings Setting?

  userId    String     @db.ObjectId
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses Response[]
  questions Question[]
  Answer    Answer[]

  @@map("forms")
}

model Setting {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  confirmationMessage      String  @default("Your response has been recorded")
  responseLimit            Int     @default(1)
  editResponse             Boolean @default(false)
  questionsRequiredDefault Boolean @default(false)
  anotherResponse          Boolean @default(false)

  formId String @unique @db.ObjectId
  form   Form   @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("settings")
}

model Question {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  text       String       @default("Untitled")
  type       QuestionType @default(TEXT)
  order      Int          @default(0)
  isRequired Boolean

  formId String @db.ObjectId
  form   Form   @relation(fields: [formId], references: [id], onDelete: Cascade)

  options Option[]
  Answer  Answer[]

  @@map("questions")
}

model Option {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  text String

  questionId String   @db.ObjectId
  Question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  answerIds String[] @db.ObjectId
  answers   Answer[] @relation(fields: [answerIds], references: [id])

  @@map("options")
}

model Response {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  submittedDate DateTime @default(now())

  answers Answer[]
  userid  String?  @db.ObjectId
  formId  String   @db.ObjectId
  
  form    Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  user    User?    @relation(fields: [userid], references: [id],onDelete:Cascade)
}

model Answer {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  text String?

  optionIds String[] @db.ObjectId

  questionId String @db.ObjectId
  responseId String @db.ObjectId
  formId     String @db.ObjectId

  question Question @relation(fields: [questionId], references: [id],onDelete:Cascade)
  options   Option[] @relation(fields: [optionIds], references: [id])
  form     Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  response Response @relation(fields: [responseId], references: [id],onDelete:Cascade)
}

enum QuestionType {
  TEXT
  MULIT_CHOICE
  CHECKBOX
  SELECT
}
